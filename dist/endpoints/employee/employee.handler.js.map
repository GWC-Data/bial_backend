{"version":3,"file":"employee.handler.js","names":["_employee","require","_db","isValidBase64","base64String","base64Regex","test","getAllEmployeeDetailsHandler","req","res","employeeDetails","Employee","findAll","length","status","json","message","EMPLOYEE_DETAILS_NOT_FOUND","error","EMPLOYEE_DETAILS_GET_ERROR","exports","getEmployeeDetailsByIdHandler","id","params","findByPk","createEmployeeDetailsHandler","employee_Name","exam_Id","exam_Name","body","newEmployeeDetail","create","date","Date","EMPLOYEE_DETAILS_CREATION_ERROR","updateEmployeeDetailsHandler","score","result","certificate","updateEmployeeDetails","set","save","EMPLOYEE_DETAILS_UPDATE_ERROR","deleteEmployeeDetailsHandler","deleteEmployeeDetails","destroy","EMPLOYEE_DETAILS_DELETE_ERROR"],"sources":["../../../src/endpoints/employee/employee.handler.ts"],"sourcesContent":["import {\r\n    EndpointAuthType,\r\n    EndpointHandler,\r\n    EndpointRequestType\r\n} from 'node-server-engine';\r\nimport {\r\n    EMPLOYEE_DETAILS_CREATION_ERROR,\r\n    EMPLOYEE_DETAILS_GET_ERROR,\r\n    EMPLOYEE_DETAILS_NOT_FOUND,\r\n    EMPLOYEE_DETAILS_UPDATE_ERROR,\r\n    EMPLOYEE_DETAILS_DELETE_ERROR\r\n} from './employee.const';\r\nimport { Employee } from 'db';\r\nimport { Response } from 'express';\r\n\r\nfunction isValidBase64(base64String: string): boolean {\r\n    // Regular expression to check if the string is a valid base64 image string (with a data URI scheme)\r\n    const base64Regex = /^data:image\\/(png);base64,/;\r\n    return base64Regex.test(base64String);\r\n}\r\n\r\nexport const getAllEmployeeDetailsHandler: EndpointHandler<EndpointAuthType> = async (\r\n    req: EndpointRequestType[EndpointAuthType],\r\n    res: Response\r\n): Promise<void> => {\r\n    try {\r\n\r\n        const employeeDetails = await Employee.findAll();\r\n\r\n        if (employeeDetails.length === 0) {\r\n            res.status(404).json({ message: EMPLOYEE_DETAILS_NOT_FOUND });\r\n            return;\r\n        }\r\n\r\n        res.status(200).json({ employeeDetails });\r\n    } catch (error) {\r\n        res.status(500).json({ message: EMPLOYEE_DETAILS_GET_ERROR, error });\r\n    }\r\n};\r\n\r\n\r\nexport const getEmployeeDetailsByIdHandler: EndpointHandler<EndpointAuthType> = async (\r\n    req: EndpointRequestType[EndpointAuthType],\r\n    res: Response\r\n): Promise<void> => {\r\n\r\n    const { id } = req.params;\r\n\r\n    try {\r\n\r\n        const employeeDetails = await Employee.findByPk(id);\r\n\r\n        if (!employeeDetails) {\r\n            res.status(400).json({ message: EMPLOYEE_DETAILS_NOT_FOUND });\r\n            return;\r\n        }\r\n\r\n        res.status(200).json({ employeeDetails });\r\n    } catch (error) {\r\n        res.status(500).json({ message: EMPLOYEE_DETAILS_GET_ERROR, error });\r\n    }\r\n};\r\n\r\n\r\n// Create a new Employee details\r\nexport const createEmployeeDetailsHandler: EndpointHandler<EndpointAuthType.NONE> = async (\r\n    req: EndpointRequestType[EndpointAuthType.NONE],\r\n    res: Response\r\n): Promise<void> => {\r\n\r\n    const { employee_Name, exam_Id, exam_Name } = req.body;\r\n\r\n    try {\r\n\r\n        // Create the employee details\r\n        const newEmployeeDetail = await Employee.create({\r\n            employee_Name,\r\n            exam_Id,\r\n            exam_Name,\r\n            date: new Date()\r\n        });\r\n\r\n        res.status(201).json({ message: 'Employee Details created successfully', newEmployeeDetail });\r\n    } catch (error) {\r\n        res.status(500).json({ message: EMPLOYEE_DETAILS_CREATION_ERROR, error });\r\n    }\r\n};\r\n\r\n//Update employee details\r\nexport const updateEmployeeDetailsHandler: EndpointHandler<EndpointAuthType.NONE> = async (\r\n    req: EndpointRequestType[EndpointAuthType.NONE],\r\n    res: Response\r\n): Promise<void> => {\r\n\r\n    const { id } = req.params;\r\n    const { score, result, certificate } = req.body;\r\n\r\n    // Validate base64 image format\r\n    if (!isValidBase64(certificate)) {\r\n        res.status(400).json({ message: 'Invalid base64 image format.' });\r\n        return;\r\n    }\r\n\r\n    try {\r\n\r\n        const updateEmployeeDetails = await Employee.findByPk(id);\r\n\r\n        if (!updateEmployeeDetails) {\r\n            res.status(404).json({ message: EMPLOYEE_DETAILS_NOT_FOUND });\r\n            return;\r\n        }\r\n\r\n        const { employee_Name, exam_Id, exam_Name, date } = updateEmployeeDetails;\r\n\r\n        updateEmployeeDetails.set({\r\n            score: score,\r\n            result: result,\r\n            certificate: certificate\r\n        });\r\n\r\n        await updateEmployeeDetails.save();\r\n\r\n        res.status(200).json({\r\n            message: 'Employee Details updated successfully',\r\n            employee_Name,\r\n            exam_Id,\r\n            exam_Name,\r\n            date,\r\n            updateEmployeeDetails\r\n        });\r\n    } catch (error) {\r\n        res.status(500).json({ message: EMPLOYEE_DETAILS_UPDATE_ERROR, error });\r\n    }\r\n};\r\n\r\n\r\n// Delete a Employee details\r\nexport const deleteEmployeeDetailsHandler: EndpointHandler<EndpointAuthType.NONE> = async (\r\n    req: EndpointRequestType[EndpointAuthType.NONE],\r\n    res: Response\r\n): Promise<void> => {\r\n\r\n    const { id } = req.params;\r\n\r\n    try {\r\n        const deleteEmployeeDetails = await Employee.findByPk(id);\r\n\r\n        if (!deleteEmployeeDetails) {\r\n            res.status(404).json({ message: EMPLOYEE_DETAILS_NOT_FOUND });\r\n            return;\r\n        }\r\n\r\n        await deleteEmployeeDetails.destroy();\r\n\r\n        res.status(200).json({ message: 'Employee Details deleted successfully' });\r\n    } catch (error) {\r\n        res.status(500).json({ message: EMPLOYEE_DETAILS_DELETE_ERROR, error });\r\n    }\r\n};"],"mappings":"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","ignoreList":[]}