{"version":3,"file":"sendEmail.validator.js","names":["emailRegex","parseEmails","value","split","map","email","trim","sendEmailValidator","exports","to","in","exists","errorMessage","custom","options","emails","every","test","Error","subject","html","cc","optional","bcc","text","isString","attachments","isArray","attachment","filename","content","path","replyTo","isEmail","priority","isIn"],"sources":["../../../src/endpoints/sendEmail/sendEmail.validator.ts"],"sourcesContent":["import { Schema } from 'express-validator';\r\n\r\nconst emailRegex = /^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/;\r\n\r\nconst parseEmails = (value: string | string[]) => {\r\n  if (typeof value === 'string') {\r\n    // Split by comma and trim spaces to handle comma-separated email addresses\r\n    return value.split(',').map((email) => email.trim());\r\n  }\r\n  return value;\r\n};\r\n\r\nexport const sendEmailValidator: Schema = {\r\n  to: {\r\n    in: 'body',\r\n    exists: {\r\n      errorMessage: 'Recipient email (to) is required'\r\n    },\r\n    custom: {\r\n      options: (value) => {\r\n        const emails = parseEmails(value);\r\n        if (!emails.every((email: string) => emailRegex.test(email))) {\r\n          throw new Error('Invalid email address in \"to\"');\r\n        }\r\n        return true;\r\n      }\r\n    }\r\n  },\r\n  subject: {\r\n    in: 'body',\r\n    exists: {\r\n      errorMessage: 'Subject is required'\r\n    }\r\n  },\r\n  html: {\r\n    in: 'body',\r\n    exists: {\r\n      errorMessage: 'HTML body content is required'\r\n    }\r\n  },\r\n  cc: {\r\n    in: 'body',\r\n    optional: true,\r\n    custom: {\r\n      options: (value) => {\r\n        if (value) {\r\n          const emails = parseEmails(value);\r\n          if (!emails.every((email: string) => emailRegex.test(email))) {\r\n            throw new Error('Invalid email address in CC');\r\n          }\r\n        }\r\n        return true;\r\n      }\r\n    }\r\n  },\r\n  bcc: {\r\n    in: 'body',\r\n    optional: true,\r\n    custom: {\r\n      options: (value) => {\r\n        if (value) {\r\n          const emails = parseEmails(value);\r\n          if (!emails.every((email: string) => emailRegex.test(email))) {\r\n            throw new Error('Invalid email address in BCC');\r\n          }\r\n        }\r\n        return true;\r\n      }\r\n    }\r\n  },\r\n  text: {\r\n    in: 'body',\r\n    optional: true,\r\n    isString: {\r\n      errorMessage: 'Text body content should be a string'\r\n    }\r\n  },\r\n  attachments: {\r\n    in: 'body',\r\n    optional: true,\r\n    isArray: {\r\n      errorMessage: 'Attachments should be an array'\r\n    },\r\n    custom: {\r\n      options: (value) => {\r\n        if (\r\n          value &&\r\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n          !value.every((attachment: any) => {\r\n            return (\r\n              attachment.filename && (attachment.content || attachment.path)\r\n            );\r\n          })\r\n        ) {\r\n          throw new Error(\r\n            'Each attachment should have a filename and content/path'\r\n          );\r\n        }\r\n        return true;\r\n      }\r\n    }\r\n  },\r\n  replyTo: {\r\n    in: 'body',\r\n    optional: true,\r\n    isEmail: {\r\n      errorMessage: 'Reply-To should be a valid email address'\r\n    }\r\n  },\r\n  priority: {\r\n    in: 'body',\r\n    optional: true,\r\n    isIn: {\r\n      options: [['high', 'normal', 'low']],\r\n      errorMessage: 'Priority should be one of high, normal, or low'\r\n    }\r\n  }\r\n};"],"mappings":";;;;;;AAEA,MAAMA,UAAU,GAAG,8CAA8C;AAEjE,MAAMC,WAAW,GAAIC,KAAwB,IAAK;EAChD,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC7B;IACA,OAAOA,KAAK,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAEC,KAAK,IAAKA,KAAK,CAACC,IAAI,CAAC,CAAC,CAAC;EACtD;EACA,OAAOJ,KAAK;AACd,CAAC;AAEM,MAAMK,kBAA0B,GAAAC,OAAA,CAAAD,kBAAA,GAAG;EACxCE,EAAE,EAAE;IACFC,EAAE,EAAE,MAAM;IACVC,MAAM,EAAE;MACNC,YAAY,EAAE;IAChB,CAAC;IACDC,MAAM,EAAE;MACNC,OAAO,EAAGZ,KAAK,IAAK;QAClB,MAAMa,MAAM,GAAGd,WAAW,CAACC,KAAK,CAAC;QACjC,IAAI,CAACa,MAAM,CAACC,KAAK,CAAEX,KAAa,IAAKL,UAAU,CAACiB,IAAI,CAACZ,KAAK,CAAC,CAAC,EAAE;UAC5D,MAAM,IAAIa,KAAK,CAAC,+BAA+B,CAAC;QAClD;QACA,OAAO,IAAI;MACb;IACF;EACF,CAAC;EACDC,OAAO,EAAE;IACPT,EAAE,EAAE,MAAM;IACVC,MAAM,EAAE;MACNC,YAAY,EAAE;IAChB;EACF,CAAC;EACDQ,IAAI,EAAE;IACJV,EAAE,EAAE,MAAM;IACVC,MAAM,EAAE;MACNC,YAAY,EAAE;IAChB;EACF,CAAC;EACDS,EAAE,EAAE;IACFX,EAAE,EAAE,MAAM;IACVY,QAAQ,EAAE,IAAI;IACdT,MAAM,EAAE;MACNC,OAAO,EAAGZ,KAAK,IAAK;QAClB,IAAIA,KAAK,EAAE;UACT,MAAMa,MAAM,GAAGd,WAAW,CAACC,KAAK,CAAC;UACjC,IAAI,CAACa,MAAM,CAACC,KAAK,CAAEX,KAAa,IAAKL,UAAU,CAACiB,IAAI,CAACZ,KAAK,CAAC,CAAC,EAAE;YAC5D,MAAM,IAAIa,KAAK,CAAC,6BAA6B,CAAC;UAChD;QACF;QACA,OAAO,IAAI;MACb;IACF;EACF,CAAC;EACDK,GAAG,EAAE;IACHb,EAAE,EAAE,MAAM;IACVY,QAAQ,EAAE,IAAI;IACdT,MAAM,EAAE;MACNC,OAAO,EAAGZ,KAAK,IAAK;QAClB,IAAIA,KAAK,EAAE;UACT,MAAMa,MAAM,GAAGd,WAAW,CAACC,KAAK,CAAC;UACjC,IAAI,CAACa,MAAM,CAACC,KAAK,CAAEX,KAAa,IAAKL,UAAU,CAACiB,IAAI,CAACZ,KAAK,CAAC,CAAC,EAAE;YAC5D,MAAM,IAAIa,KAAK,CAAC,8BAA8B,CAAC;UACjD;QACF;QACA,OAAO,IAAI;MACb;IACF;EACF,CAAC;EACDM,IAAI,EAAE;IACJd,EAAE,EAAE,MAAM;IACVY,QAAQ,EAAE,IAAI;IACdG,QAAQ,EAAE;MACRb,YAAY,EAAE;IAChB;EACF,CAAC;EACDc,WAAW,EAAE;IACXhB,EAAE,EAAE,MAAM;IACVY,QAAQ,EAAE,IAAI;IACdK,OAAO,EAAE;MACPf,YAAY,EAAE;IAChB,CAAC;IACDC,MAAM,EAAE;MACNC,OAAO,EAAGZ,KAAK,IAAK;QAClB,IACEA,KAAK;QACL;QACA,CAACA,KAAK,CAACc,KAAK,CAAEY,UAAe,IAAK;UAChC,OACEA,UAAU,CAACC,QAAQ,KAAKD,UAAU,CAACE,OAAO,IAAIF,UAAU,CAACG,IAAI,CAAC;QAElE,CAAC,CAAC,EACF;UACA,MAAM,IAAIb,KAAK,CACb,yDACF,CAAC;QACH;QACA,OAAO,IAAI;MACb;IACF;EACF,CAAC;EACDc,OAAO,EAAE;IACPtB,EAAE,EAAE,MAAM;IACVY,QAAQ,EAAE,IAAI;IACdW,OAAO,EAAE;MACPrB,YAAY,EAAE;IAChB;EACF,CAAC;EACDsB,QAAQ,EAAE;IACRxB,EAAE,EAAE,MAAM;IACVY,QAAQ,EAAE,IAAI;IACda,IAAI,EAAE;MACJrB,OAAO,EAAE,CAAC,CAAC,MAAM,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;MACpCF,YAAY,EAAE;IAChB;EACF;AACF,CAAC","ignoreList":[]}